Microsoft (R) Macro Assembler Version 14.29.30147.0	    12/13/22 08:23:52
My First Projec					     Page 1 - 1


				TITLE My First Project   
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 
 = 000001F5			BUFFER_SIZE = 501
 00000000			.data
 00000000  00000028 [		buffer BYTE 40 DUP(?),0dh,0ah
	    00
	   ] 0D 0A
 0000002A 0000002A		bufSize DWORD ($-buffer)
 0000002E 43 61 6E 6E 6F	errMsg BYTE "Cannot open file",0dh,0ah,0
	   74 20 6F 70 65
	   6E 20 66 69 6C
	   65 0D 0A 00
 00000041 6F 75 74 70 75	filename     BYTE "output.txt",0
	   74 2E 74 78 74
	   00
 0000004C 00000000		fileHandle   HANDLE ?			; handle to output file
 00000050 00000000		bytesWritten DWORD ?    			; number of bytes written   ;File VAriables
 00000054			quesL1 DWORD 10 DUP(?)
 0000007C			quesL2 DWORD 10 DUP(?)
 000000A4			quesL3 DWORD 10 DUP(?)			;QUESTION ADDRESSES
 000000CC 45 6E 74 65 72	player BYTE "Enter Player Name: ",0
	   20 50 6C 61 79
	   65 72 20 4E 61
	   6D 65 3A 20 00
 000000E0 20 20 20 20 20	spaces1 BYTE "                                                                      ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00000127 01 04 02 02 03	arr1 BYTE 1,4,2,2,3,3,1,2,4,3
	   03 01 02 04 03
 00000131 02 04 03 01 02	arr2 BYTE 2,4,3,1,2,2,1,1,1,4
	   02 01 01 01 04
 0000013B 03 04 03 02 04	arr3 BYTE 3,4,3,2,4,1,1,1,2,3		;ANSWERS
	   01 01 01 02 03
 00000145  0000000A [		name1 BYTE 10 DUP(?)
	    00
	   ]
 0000014F 00			scoreL1 BYTE ?  
 00000150 00			scoreL2 BYTE ?  
 00000151 00			scoreL3 BYTE ?						;SCORE OF EACH LEVEL 
 00000152 59 4F 55 52 20	msg1 BYTE "YOUR LEVEL 1 SCORE: ",0
	   4C 45 56 45 4C
	   20 31 20 53 43
	   4F 52 45 3A 20
	   00
 00000167 59 4F 55 52 20	msg3 BYTE "YOUR LEVEL 2 SCORE: ",0
	   4C 45 56 45 4C
	   20 32 20 53 43
	   4F 52 45 3A 20
	   00
 0000017C 59 4F 55 52 20	msg4 BYTE "YOUR LEVEL 3 SCORE: ",0
	   4C 45 56 45 4C
	   20 33 20 53 43
	   4F 52 45 3A 20
	   00
 00000191 45 78 63 65 6C	string1 BYTE "Excellent IQ LEVEL",0
	   6C 65 6E 74 20
	   49 51 20 4C 45
	   56 45 4C 00
 000001A4 46 41 49 52 20	string2 BYTE "FAIR IQ LEVEL ",0
	   49 51 20 4C 45
	   56 45 4C 20 00
 000001B3 50 4F 4F 52 20	string3 BYTE "POOR IQ LEVEL",0				;IQ STAGING
	   49 51 20 4C 45
	   56 45 4C 00
 000001C1 43 4F 4E 47 52	string4 BYTE 'C','O','N','G','R','A','T','U','L','A','T','I','O','N',' ','L','E','V','E','L',' ','P','A','S','S','E','D',0	;REWARD
	   41 54 55 4C 41
	   54 49 4F 4E 20
	   4C 45 56 45 4C
	   20 50 41 53 53
	   45 44 00
 000001DD 20 20 20 20 51	string5 BYTE "    QUIZ/INTELLIGENCE GAME",0
	   55 49 5A 2F 49
	   4E 54 45 4C 4C
	   49 47 45 4E 43
	   45 20 47 41 4D
	   45 00
 000001F8 20 20 20 20 20	string6 BYTE "         PROJECT BY",0dh,10,"                                                                          Muhammad Anas 21K-4556",0dh,10,"                                                                        Muhammad Shaheer  21K-3323",13,10," ",13,0
	   20 20 20 20 50
	   52 4F 4A 45 43
	   54 20 42 59 0D
	   0A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   4D 75 68 61 6D
	   6D 61 64 20 41
	   6E 61 73 20 32
	   31 4B 2D 34 35
	   35 36 0D 0A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 4D 75 68 61
	   6D 6D 61 64 20
	   53 68 61 68 65
	   65 72 20 20 32
	   31 4B 2D 33 33
	   32 33 0D 0A 20
	   0D 00
 000002D6 50 52 45 53 53	string7 BYTE "PRESS ANY KEY TO CONTINUE!!!!",0
	   20 41 4E 59 20
	   4B 45 59 20 54
	   4F 20 43 4F 4E
	   54 49 4E 55 45
	   21 21 21 21 00
 000002F4 59 4F 55 52 20	QuizScore BYTE "YOUR QUIZ SCORE: ",0
	   51 55 49 5A 20
	   53 43 4F 52 45
	   3A 20 00
 00000306 59 4F 55 52 20	finalmsg BYTE "YOUR IQ LEVEL: ",0
	   49 51 20 4C 45
	   56 45 4C 3A 20
	   00
 00000316 57 48 41 54 20	Opt BYTE "WHAT DO YOU WANT ? ",0ah,"1: PLAY A QUIZ GAME ",0ah,"2: CALCULATE YOUR IQ ",0ah,"Enter choice: ",0
	   44 4F 20 59 4F
	   55 20 57 41 4E
	   54 20 3F 20 0A
	   31 3A 20 50 4C
	   41 59 20 41 20
	   51 55 49 5A 20
	   47 41 4D 45 20
	   0A 32 3A 20 43
	   41 4C 43 55 4C
	   41 54 45 20 59
	   4F 55 52 20 49
	   51 20 0A 45 6E
	   74 65 72 20 63
	   68 6F 69 63 65
	   3A 20 00
 00000364 05			life BYTE 5		;LIFE FOR PLAYER ONLY IN OPT QUIZ
 00000365 0000			TotalScore WORD ?
 00000367 0000001B		count DWORD 27
				
				
 0000036B  000001F5 [		buffer2 BYTE BUFFER_SIZE DUP(10)
	    0A
	   ]
 00000560 70 6C 61 79 65	f_name BYTE "players.txt",0
	   72 73 2E 74 78
	   74 00
 0000056C 00000000		f_handle HANDLE ?
 00000570 00000000		stringlength dword ?
 00000574 63 61 6E 6E 6F	str1 byte  "cannot open",0
	   74 20 6F 70 65
	   6E 00
 00000580 0D 0A			space byte 0dh,0ah
				
 = 00001388			bufferSize = 5000
 00000582  00001388 [		buffers BYTE bufferSize DUP(?)
	    00
	   ]
 0000190A 00000000		filehandles HANDLE ?
 0000190E 69 6E 70 75 74	filenames BYTE "input.txt", 0
	   2E 74 78 74 00
 00001918 00000000		bytesReads DWORD ?
 0000191C  0000000B [		answer_arrays DWORD 11 DUP(0)
	    00000000
	   ]
				
 = 00001388			bufferSize2 = 5000
 00001948  00001388 [		buffers2 BYTE bufferSize2 DUP(?)
	    00
	   ]
 00002CD0 00000000		filehandles2 HANDLE ?
 00002CD4 69 6E 70 75 74	filenames2 BYTE "input2.txt", 0
	   32 2E 74 78 74
	   00
 00002CDF 00000000		bytesReads2 DWORD ?
 00002CE3  0000000B [		answer_arrays2 DWORD 11 DUP(0)
	    00000000
	   ]
				
 = 00001388			bufferSize1 = 5000
 00002D0F  00001388 [		buffers1 BYTE bufferSize1 DUP(?)
	    00
	   ]
 00004097 00000000		filehandles1 HANDLE ?
 0000409B 69 6E 70 75 74	filenames1 BYTE "input1.txt", 0
	   31 2E 74 78 74
	   00
 000040A6 00000000		bytesReads1 DWORD ?
 000040AA  0000000B [		answer_arrays1 DWORD 11 DUP(0)
	    00000000
	   ]
				
 = 00000042			aq1c_size = 66
 000040D6  00000043 [		aq1c BYTE 67 DUP(?)
	    00
	   ]
 = 00000043			aq2c_size = 67
 00004119  00000044 [		aq2c BYTE 68 DUP(?)
	    00
	   ]
 = 00000065			aq3c_size = 101
 0000415D  00000067 [		aq3c BYTE 103 DUP(?)
	    00
	   ]
 = 00000065			aq4c_size = 101
 000041C4  00000066 [		aq4c BYTE 102 DUP(?)
	    00
	   ]
 = 00000045			aq5c_size = 69
 0000422A  00000046 [		aq5c BYTE 70 DUP(?)
	    00
	   ]
 = 00000066			aq6c_size = 102
 00004270  00000067 [		aq6c BYTE 103 DUP(?)
	    00
	   ]
 = 00000059			aq7c_size = 89
 000042D7  0000005A [		aq7c BYTE 90 DUP(?)
	    00
	   ]
 = 00000059			aq8c_size = 89
 00004331  0000005A [		aq8c BYTE 90 DUP(?)
	    00
	   ]
 = 0000007C			aq9c_size = 124
 0000438B  0000007D [		aq9c BYTE 125 DUP(?)
	    00
	   ]
 = 0000003A			aq10c_size = 58
 00004408  0000003B [		aq10c BYTE 59 DUP(?)
	    00
	   ]
 00004443  0000000B [		addresses DWORD 11 DUP(?)
	    00000000
	   ]
				;finalSize = 92, 185, 422, 640, 737, 918, 997, 1094, 1211, 1315
				
 = 00000052			bq1c_size = 82
 0000446F  00000053 [		bq1c BYTE 83 DUP(?)
	    00
	   ]
 = 0000004B			bq2c_size = 75
 000044C2  0000004C [		bq2c BYTE 76 DUP(?)
	    00
	   ]
 = 0000009D			bq3c_size = 157
 0000450E  0000009E [		bq3c BYTE 158 DUP(?)
	    00
	   ]
 = 000000AB			bq4c_size = 171
 000045AC  000000AC [		bq4c BYTE 172 DUP(?)
	    00
	   ]
 = 000000A6			bq5c_size = 166
 00004658  000000A7 [		bq5c BYTE 167 DUP(?)
	    00
	   ]
 = 00000050			bq6c_size = 80
 000046FF  00000051 [		bq6c BYTE 81 DUP(?)
	    00
	   ]
 = 0000008C			bq7c_size = 140
 00004750  0000008D [		bq7c BYTE 141 DUP(?)
	    00
	   ]
 = 00000082			bq8c_size = 130
 000047DD  00000083 [		bq8c BYTE 131 DUP(?)
	    00
	   ]
 = 0000007B			bq9c_size = 123
 00004860  0000007C [		bq9c BYTE 124 DUP(?)
	    00
	   ]
 = 00000056			bq10c_size = 86
 000048DC  00000057 [		bq10c BYTE 87 DUP(?)
	    00
	   ]
 00004933  0000000B [		addresses2 DWORD 11 DUP(?)
	    00000000
	   ]
				
 = 0000005A			cq1c_size = 90
 0000495F  0000005B [		cq1c BYTE 91 DUP(?)
	    00
	   ]
 = 000000B7			cq2c_size = 183
 000049BA  000000B8 [		cq2c BYTE 184 DUP(?)
	    00
	   ]
 = 00000097			cq3c_size = 151
 00004A72  00000098 [		cq3c BYTE 152 DUP(?)
	    00
	   ]
 = 000000DC			cq4c_size = 220
 00004B0A  000000DD [		cq4c BYTE 221 DUP(?)
	    00
	   ]
 = 00000063			cq5c_size = 99
 00004BE7  00000064 [		cq5c BYTE 100 DUP(?)
	    00
	   ]
 = 000000D8			cq6c_size = 216
 00004C4B  000000D9 [		cq6c BYTE 217 DUP(?)
	    00
	   ]
 = 0000004B			cq7c_size = 75
 00004D24  0000004C [		cq7c BYTE 76 DUP(?)
	    00
	   ]
 = 0000005F			cq8c_size = 95
 00004D70  00000060 [		cq8c BYTE 96 DUP(?)
	    00
	   ]
 = 00000073			cq9c_size = 115
 00004DD0  00000074 [		cq9c BYTE 116 DUP(?)
	    00
	   ]
 = 00000066			cq10c_size = 102
 00004E44  00000067 [		cq10c BYTE 103 DUP(?)
	    00
	   ]
 00004EAB  0000000B [		addresses1 DWORD 11 DUP(?)
	    00000000
	   ]
				
				
				Level3_Print PROTO, questions:PTR DWORD, answers:PTR DWORD, scorel3:byte
				Level2_Print PROTO, questions2:PTR DWORD, answers2:PTR DWORD, scorel2:byte
				Level1_Print PROTO, questions1:PTR DWORD, answers1:PTR DWORD, scorel1:byte
				QLevel3_Print PROTO, questions:PTR DWORD, answers:PTR DWORD, scorel3:byte
				QLevel2_Print PROTO, questions2:PTR DWORD, answers2:PTR DWORD, scorel2:byte
				QLevel1_Print PROTO, questions1:PTR DWORD, answers1:PTR DWORD, scorel1:byte
				
 00000000			.code
 00000000			main PROC
 00000000  B8 0000004F		mov eax,white+(red*16)
 00000005  E8 00000000 E	call settextcolor
				
				;///////FILING - APPEND MODE////////////////
				;;START OF PROGRAM
 0000000A  BA 00000560 R	mov edx,offset f_name
 0000000F  E8 0000042E		call outputfile
 00000014  A3 0000056C R	mov f_handle,eax
 00000019  83 F8 FF		cmp eax,INVALID_HANDLE_VALUE     
 0000001C  75 0C		jne file_ok
 0000001E  BA 00000574 R	mov edx,offset str1
 00000023  E8 00000000 E	call writestring
 00000028  EB 68		jmp quit
				
 0000002A			file_ok:
 0000002A  BA 000000CC R	mov edx,offset PLAYER
 0000002F  E8 00000000 E	call writestring
 00000034  B9 000001F5		mov ecx,BUFFER_SIZE
 00000039  BA 0000036B R	mov edx,offset buffer2
 0000003E  E8 00000000 E	call readstring
 00000043  A3 00000570 R	mov stringlength,eax
				
				INVOKE SetFilePointer,
				f_Handle,0,0,FILE_END
				
 00000059  A1 0000056C R	mov eax,f_handle
 0000005E  BA 00000580 R	mov edx,offset space
 00000063  B9 00000001		mov ecx,1
 00000068  E8 00000000 E	call writetofile
				
 0000006D  A1 0000056C R	mov eax,f_handle
 00000072  BA 0000036B R	mov edx,offset buffer2
 00000077  8B 0D 00000570 R	mov ecx,stringlength
 0000007D  E8 00000000 E	call writetofile
 00000082  E8 00000000 E	call crlf
				INVOKE CloseHandle, fileHandle	;FILING
				
 00000092			quit:
 00000092  E8 00000391		call spaces
 00000097  BA 000001DD R	mov edx,offset string5
 0000009C  E8 00000000 E	call writestring
 000000A1  E8 00000000 E	call crlf
 000000A6  E8 0000037D		call spaces
 000000AB  BA 000001F8 R	mov edx,offset string6
 000000B0  E8 00000000 E	call writestring
 000000B5  E8 00000000 E	call crlf
 000000BA  E8 00000369		call spaces
 000000BF  BA 000002D6 R	mov edx,offset string7
 000000C4  E8 00000000 E	call writestring
 000000C9  E8 00000000 E	call crlf
 000000CE  E8 00000000 E	call readchar
 000000D3  E8 00000000 E	call clrscr								;MAIN MENU
 000000D8  B8 00000000		mov eax,0
 000000DD  BE 00000000		mov esi,0
				
 000000E2  E8 00000000 E	call clrscr
 000000E7  BA 00000316 R	mov edx,offset Opt
 000000EC  E8 00000000 E	call WriteString
 000000F1  E8 00000000 E	Call ReadDec							
 000000F6  83 F8 01		cmp eax,1
 000000F9  0F 84 0000008F	je Quiz   ;///PLAYERS JUMPS TO QUIZ IF CHOICE==1
				
				
				
				;///CALLING IQ LEVEL FUNCTIONS////////
				INVOKE Level1_Print, ADDR addresses1, ADDR answer_arrays1, scoreL1
 00000114  66| B8 07D0		mov ax,2000
 00000118  E8 00000000 E	call Delay 
 0000011D  E8 00000000 E	call clrscr
				INVOKE Level2_Print, ADDR addresses2, ADDR answer_arrays2, scoreL2
 00000137  66| B8 07D0		mov ax,2000
 0000013B  E8 00000000 E	call Delay
 00000140  E8 00000000 E	call clrscr
				INVOKE Level3_Print, ADDR addresses, ADDR answer_arrays, scoreL3
 0000015A  E8 00000000 E	call clrscr
				
 0000015F  66| B8 0000		mov ax,0
 00000163  A0 0000014F R	mov al,scoreL1
 00000168  66| 50		push ax
 0000016A  A0 00000150 R	mov al,scoreL2
 0000016F  66| 50		push ax
 00000171  A0 00000151 R	mov al,scoreL3
 00000176  66| 50		push ax
 00000178  E8 000001F4		call Percentage   ;//PERCENTAGE FUNCTION TO CALCULATE PERCENTAGE OF IQ
 0000017D  66| A1		mov ax,TotalScore
	   00000365 R
 00000183  50			push eax
 00000184  E8 00000233		call standing
 00000189  E9 00000191		jmp exi
				
				
				
 0000018E			Quiz:				;QUIZ FUNCTIONS CALLED
				;///////Calling IQ FUNCTIONS
				INVOKE QLevel1_Print, ADDR addresses1, ADDR answer_arrays1, scoreL1
 000001A3  66| B8 07D0		mov ax,2000
 000001A7  E8 00000000 E	call Delay
 000001AC  E8 00000000 E	call clrscr
 000001B1  A0 00000364 R	mov al,life
 000001B6  3C 00		cmp al,0
 000001B8  0F 84 000000DD	je I1 
 000001BE  E8 00000000 E	call Crlf
 000001C3  E8 0000015E		call reward
 000001C8  E8 00000000 E	call crlf
 000001CD  66| B8 07D0		mov ax,2000
 000001D1  E8 00000000 E	call Delay 
 000001D6  E8 00000000 E	call clrscr
 000001DB  FC			cld
				
				
				INVOKE QLevel2_Print, ADDR addresses2, ADDR answer_arrays2, scoreL2
 000001F1  66| B8 07D0		mov ax,2000
 000001F5  E8 00000000 E	call Delay
 000001FA  E8 00000000 E	call clrscr
 000001FF  A0 00000364 R	mov al,life
 00000204  3C 00		cmp al,0
 00000206  0F 84 000000B9	je I2
				;call Crlf
 0000020C  E8 00000115		call reward
				;call crlf
 00000211  66| B8 07D0		mov ax,2000
 00000215  E8 00000000 E	call Delay
 0000021A  E8 00000000 E	call clrscr 
				
				INVOKE QLevel3_Print, ADDR addresses, ADDR answer_arrays, scoreL3
 00000234  66| B8 03E8		mov ax,1000
 00000238  E8 00000000 E	call Delay
 0000023D  E8 00000000 E	call clrscr
 00000242  A0 00000364 R	mov al,life
 00000247  3C 00		cmp al,0
 00000249  0F 84 000000A1	je I3
				;call Crlf
 0000024F  E8 000000D2		call reward
 00000254  E8 00000000 E	call crlf
 00000259  66| B8 07D0		mov ax,2000
 0000025D  E8 00000000 E	call Delay 
 00000262  E8 00000000 E	call clrscr
				
 00000267  B8 00000000		mov eax,0
 0000026C  A0 0000014F R	mov al,scoreL1
 00000271  02 05 00000150 R	add al,scoreL2
 00000277  02 05 00000151 R	add al,scoreL3
 0000027D  E8 00000000 E	call Crlf
 00000282  BA 000002F4 R	mov edx,offset QuizScore
 00000287  E8 00000000 E	call WriteString
 0000028C  E8 00000000 E	call WriteDec
 00000291  E8 00000000 E	call Crlf
 00000296  E9 00000084		jmp exi
 0000029B			I1:
 0000029B  E8 00000000 E	call clrscr
 000002A0  B8 00000000		mov eax,0
 000002A5  A0 0000014F R	mov al,scoreL1
 000002AA  E8 00000000 E	call crlf
 000002AF  BA 000002F4 R	mov edx,offset QuizScore
 000002B4  E8 00000000 E	call WriteString
 000002B9  E8 00000000 E	call WriteDec
 000002BE  E8 00000000 E	call Crlf
 000002C3  EB 5A		jmp exi
				
 000002C5			I2:
 000002C5  B8 00000000		mov eax,0
 000002CA  A0 0000014F R	mov al,scoreL1
 000002CF  02 05 00000150 R	add al,scoreL2
 000002D5  E8 00000000 E	call Crlf
 000002DA  BA 000002F4 R	mov edx,offset QuizScore
 000002DF  E8 00000000 E	call WriteString
 000002E4  E8 00000000 E	call WriteDec
 000002E9  E8 00000000 E	call Crlf
 000002EE  EB 2F		jmp exi
				
 000002F0			I3:
 000002F0  B8 00000000		mov eax,0
 000002F5  A0 0000014F R	mov al,scoreL1
 000002FA  02 05 00000150 R	add al,scoreL2
 00000300  02 05 00000151 R	add al,scoreL3
 00000306  E8 00000000 E	call Crlf
 0000030B  BA 000002F4 R	mov edx,offset QuizScore
 00000310  E8 00000000 E	call WriteString
 00000315  E8 00000000 E	call WriteDec
 0000031A  E8 00000000 E	call Crlf
 0000031F			exi:
				exit
 00000326			main ENDP
				
				;/////////MAIN ENDP
				
				
				
				;//FUNCTIONS DEFINED
				
 00000326			reward Proc		;//REWARD WILL BE DISPLAYED AFTER PLAYER CROSSES LEVEL
 00000326  60			pushad
 00000327  B2 45		mov dl,69
 00000329  B6 12		mov dh,18
 0000032B  E8 00000000 E	call gotoxy
 00000330  BB 00000000		mov ebx,0
 00000335  BE 00000000		mov esi,0
 0000033A			L5:
 0000033A  3B 1D 00000367 R	cmp ebx,count
 00000340  74 1E		jz Rw
 00000342  8A 86 000001C1 R	mov al,string4[esi]
 00000348  E8 00000000 E	call WriteChar
 0000034D  B8 00000096		mov eax,150
 00000352  E8 00000000 E	call Delay
 00000357  46			inc esi
 00000358  FF 0D 00000367 R	dec count
 0000035E  EB DA		jmp L5
				
 00000360			Rw:
 00000360  B8 0000001B		mov eax,27
 00000365  A3 00000367 R	mov count,eax
 0000036A  B8 00000000		mov eax,0
 0000036F  61			popad
 00000370  C3			ret
 00000371			reward ENDP
				
				
				
				
				
 00000371			Percentage Proc
 00000371  55			push ebp
 00000372  8B EC		mov ebp,esp
 00000374  B8 00000000		mov eax,0
 00000379  66| 8B 45 08		mov ax,[ebp+8]		;RESTORING SCORES FROM STACK
 0000037D  66| 03 45 0A		add ax,[ebp+10]
 00000381  66| 03 45 0C		add ax,[ebp+12]
 00000385  66| BB 0064		mov bx,100
 00000389  66| F7 E3		mul bx
 0000038C  66| BB 003C		mov bx,60
 00000390  66| F7 F3		div bx
 00000393  66| A3		mov TotalScore,ax
	   00000365 R
 00000399  BA 00000306 R	mov edx,offset finalmsg
 0000039E  E8 00000000 E	call WriteString
 000003A3  66| A1		mov ax,TotalScore
	   00000365 R
 000003A9  E8 00000000 E	call writedec
 000003AE  B0 25		mov al,'%'
 000003B0  E8 00000000 E	call WriteChar
 000003B5  E8 00000000 E	call Crlf
 000003BA  5D			pop ebp
 000003BB  C3			ret 
 000003BC			Percentage ENDP
				
				;//////IQ STANDING
 000003BC			standing PROC
 000003BC  55			push ebp
 000003BD  8B EC		mov ebp,esp
 000003BF  8B 45 08		mov eax,[ebp+8]
 000003C2  66| A3		mov TotalScore,ax
	   00000365 R
 000003C8  66| 83 3D		cmp TotalScore,100
	   00000365 R 64
 000003D0  74 25		JE EQUAL
 000003D2  66| 83 3D		cmp TotalScore,60
	   00000365 R 3C
 000003DA  7D 36		JGE GREATER
 000003DC  BA 000001B3 R	mov edx,offset string3
 000003E1  E8 00000000 E	call crlf
 000003E6  E8 00000000 E	call writestring
 000003EB  E8 00000000 E	call crlf
				exit
 000003F7			EQUAL:     
 000003F7  BA 00000191 R	mov edx,offset string1
 000003FC  E8 00000000 E	call crlf
 00000401  E8 00000000 E	call writestring
 00000406  E8 00000000 E	call crlf
				exit
 00000412			GREATER:
 00000412  BA 000001A4 R	mov edx, offset string2
 00000417  E8 00000000 E	call crlf
 0000041C  E8 00000000 E	call writestring
 00000421  E8 00000000 E	call crlf
 00000426  5D			pop ebp
 00000427  C3			ret
 00000428			standing endp
				
 00000428			spaces PROC
 00000428  E8 00000000 E	call crlf
 0000042D  E8 00000000 E	call crlf
 00000432  E8 00000000 E	call crlf
 00000437  BA 000000E0 R	mov edx,offset spaces1
 0000043C  E8 00000000 E	call writestring
 00000441  C3			ret
 00000442			spaces endp
				
 00000442			outputfile proc
				invoke createfile,
				addr f_name,
				generic_write,
				do_not_share,
				null,
				OPEN_existing,
				file_attribute_normal,
				0
 0000045E  C3			ret
 0000045F			outputfile endp
				
				
				;/////////////IQ FUNCTION DEF
 0000045F			Level3_Print PROC, questions:PTR DWORD, answers:PTR DWORD, scoreLev3:BYTE
 00000462  60			pushad
 00000463  BA 0000190E R	mov edx, OFFSET filenames
 00000468  E8 00000000 E	call OpenInputFile
 0000046D  A3 0000190A R	mov filehandles, eax
				
 00000472  BA 00000582 R	mov edx, OFFSET buffers
 00000477  B9 00001388		mov ecx, bufferSize
 0000047C  E8 00000000 E	call ReadFromFile
 00000481  A3 00001918 R	mov bytesReads, eax
				
 00000486  B9 0000005A		mov ecx, cq1c_size
 0000048B  BE 00000582 R	mov esi, OFFSET buffers
 00000490  BF 0000495F R	mov edi, OFFSET cq1c
 00000495  F3/ A4		rep movsb
 00000497  C6 05 000049BA R	mov cq1c[91], 0
	   00
 0000049E  C7 05 00004447 R	mov addresses[1 * TYPE addresses], OFFSET cq1c
	   0000495F R
				
 000004A8  B9 000000B7		mov ecx, cq2c_size
 000004AD  83 C6 02		add esi, 2
 000004B0  BF 000049BA R	mov edi, OFFSET cq2c
 000004B5  F3/ A4		rep movsb
 000004B7  C6 05 00004A72 R	mov cq2c[184], 0
	   00
 000004BE  C7 05 0000444B R	mov addresses[2 * TYPE addresses], OFFSET cq2c
	   000049BA R
				
 000004C8  B9 00000097		mov ecx, cq3c_size
 000004CD  83 C6 02		add esi, 2
 000004D0  BF 00004A72 R	mov edi, OFFSET cq3c
 000004D5  F3/ A4		rep movsb
 000004D7  C6 05 00004B0A R	mov cq3c[152], 0
	   00
 000004DE  C7 05 0000444F R	mov addresses[3 * TYPE addresses], OFFSET cq3c
	   00004A72 R
				
 000004E8  B9 000000DC		mov ecx, cq4c_size
 000004ED  83 C6 02		add esi, 2
 000004F0  BF 00004B0A R	mov edi, OFFSET cq4c
 000004F5  F3/ A4		rep movsb
 000004F7  C6 05 00004BE7 R	mov cq4c[221], 0
	   00
 000004FE  C7 05 00004453 R	mov addresses[4 * TYPE addresses], OFFSET cq4c
	   00004B0A R
				
 00000508  B9 00000063		mov ecx, cq5c_size
 0000050D  83 C6 02		add esi, 2
 00000510  BF 00004BE7 R	mov edi, OFFSET cq5c
 00000515  F3/ A4		rep movsb
 00000517  C6 05 00004C4B R	mov cq5c[100], 0
	   00
 0000051E  C7 05 00004457 R	mov addresses[5 * TYPE addresses], OFFSET cq5c
	   00004BE7 R
				
 00000528  B9 000000D8		mov ecx, cq6c_size
 0000052D  83 C6 02		add esi, 2
 00000530  BF 00004C4B R	mov edi, OFFSET cq6c
 00000535  F3/ A4		rep movsb
 00000537  C6 05 00004D24 R	mov cq6c[217], 0
	   00
 0000053E  C7 05 0000445B R	mov addresses[6 * TYPE addresses], OFFSET cq6c
	   00004C4B R
				
 00000548  B9 0000004B		mov ecx, cq7c_size
 0000054D  83 C6 02		add esi, 2
 00000550  BF 00004D24 R	mov edi, OFFSET cq7c
 00000555  F3/ A4		rep movsb
 00000557  C6 05 00004D70 R	mov cq7c[76], 0
	   00
 0000055E  C7 05 0000445F R	mov addresses[7 * TYPE addresses], OFFSET cq7c
	   00004D24 R
				
 00000568  B9 0000005F		mov ecx, cq8c_size
 0000056D  83 C6 02		add esi, 2
 00000570  BF 00004D70 R	mov edi, OFFSET cq8c
 00000575  F3/ A4		rep movsb
 00000577  C6 05 00004DD0 R	mov cq8c[96], 0
	   00
 0000057E  C7 05 00004463 R	mov addresses[8 * TYPE addresses], OFFSET cq8c
	   00004D70 R
				
 00000588  B9 00000073		mov ecx, cq9c_size
 0000058D  83 C6 02		add esi, 2
 00000590  BF 00004DD0 R	mov edi, OFFSET cq9c
 00000595  F3/ A4		rep movsb
 00000597  C6 05 00004E44 R	mov cq9c[116], 0
	   00
 0000059E  C7 05 00004467 R	mov addresses[9 * TYPE addresses], OFFSET cq9c
	   00004DD0 R
				
 000005A8  B9 00000066		mov ecx, cq10c_size
 000005AD  83 C6 02		add esi, 2
 000005B0  BF 00004E44 R	mov edi, OFFSET cq10c
 000005B5  F3/ A4		rep movsb
 000005B7  C6 05 00004EAB R	mov cq10c[103], 0
	   00
 000005BE  C7 05 0000446B R	mov addresses[10 * TYPE addresses], OFFSET cq10c
	   00004E44 R
				
				mWrite "Total bytes in file: "
 00004ED7		     1		.data		
 00004ED7 54 6F 74 61 6C     1		??0000 BYTE "Total bytes in file: ",0	
	   20 62 79 74 65
	   73 20 69 6E 20
	   66 69 6C 65 3A
	   20 00
 000005C8		     1		.code
 000005C8  52		     1		push	edx
 000005C9  BA 00004ED7 R     1		mov	edx,OFFSET ??0000
 000005CE  E8 00000000 E     1		call	WriteString
 000005D3  5A		     1		pop	edx
 000005D4  E8 00000000 E	call WriteDec
 000005D9  E8 00000000 E	call Crlf
 000005DE  E8 00000000 E	call Crlf
 000005E3  B9 0000000A		mov ecx, 10
 000005E8  8B 7D 0C		mov edi, answers
 000005EB  8B 6D 08		mov ebp, questions
 000005EE  BE 0000013B R	mov esi,offset arr3
 000005F3  83 C5 04		add ebp, 4
 000005F6  83 C7 04		add edi, 4
 000005F9			L3:
 000005F9  8B 55 00			mov edx, [ebp]
 000005FC  E8 00000000 E		call WriteString
 00000601  E8 00000000 E		call crlf
 00000606  83 C5 04			add ebp,4
 00000609  83 C7 04			add edi,4
 0000060C  E8 00000000 E		call readdec
 00000611  3A 06			cmp al,[esi]
 00000613  75 03			jne E1
 00000615  80 C3 03			add bl,3
 00000618				E1:
 00000618  46				inc esi
 00000619  74 02			je S
 0000061B  E2 DC			loop l3
 0000061D				S:
 0000061D  E8 00000000 E		call crlf
 00000622  BA 0000017C R		mov edx,offset msg4
 00000627  E8 00000000 E		call writestring
 0000062C  8A C3			mov al,bl
 0000062E  E8 00000000 E		call writedec
 00000633  88 1D 00000151 R		mov scoreL3,bl
 00000639  C6 45 10 00			mov scorelev3,0
 0000063D  61				popad
				ret
 00000642			Level3_Print ENDP
				
				
 00000642			Level2_Print PROC, questions2:PTR DWORD, answers2:PTR DWORD, scoreLev2:BYTE
 00000645  60			pushad
 00000646  BA 00002CD4 R	mov edx, OFFSET filenames2
 0000064B  E8 00000000 E	call OpenInputFile
 00000650  A3 00002CD0 R	mov filehandles2, eax
				
 00000655  BA 00001948 R	mov edx, OFFSET buffers2
 0000065A  B9 00001388		mov ecx, bufferSize2
 0000065F  E8 00000000 E	call ReadFromFile
 00000664  A3 00002CDF R	mov bytesReads2, eax
				
 00000669  B9 00000052		mov ecx, bq1c_size
 0000066E  BE 00001948 R	mov esi, OFFSET buffers2
 00000673  BF 0000446F R	mov edi, OFFSET bq1c
 00000678  F3/ A4		rep movsb
 0000067A  C6 05 000044C2 R	mov bq1c[83], 0
	   00
 00000681  C7 05 00004937 R	mov addresses2[1 * TYPE addresses2], OFFSET bq1c
	   0000446F R
				
 0000068B  B9 0000004B		mov ecx, bq2c_size
 00000690  83 C6 02		add esi, 2
 00000693  BF 000044C2 R	mov edi, OFFSET bq2c
 00000698  F3/ A4		rep movsb
 0000069A  C6 05 0000450E R	mov bq2c[76], 0
	   00
 000006A1  C7 05 0000493B R	mov addresses2[2 * TYPE addresses2], OFFSET bq2c
	   000044C2 R
				
 000006AB  B9 0000009D		mov ecx, bq3c_size
 000006B0  83 C6 02		add esi, 2
 000006B3  BF 0000450E R	mov edi, OFFSET bq3c
 000006B8  F3/ A4		rep movsb
 000006BA  C6 05 000045AC R	mov bq3c[158], 0
	   00
 000006C1  C7 05 0000493F R	mov addresses2[3 * TYPE addresses2], OFFSET bq3c
	   0000450E R
				
 000006CB  B9 000000AB		mov ecx, bq4c_size
 000006D0  83 C6 02		add esi, 2
 000006D3  BF 000045AC R	mov edi, OFFSET bq4c
 000006D8  F3/ A4		rep movsb
 000006DA  C6 05 00004658 R	mov bq4c[172], 0
	   00
 000006E1  C7 05 00004943 R	mov addresses2[4 * TYPE addresses2], OFFSET bq4c
	   000045AC R
				
 000006EB  B9 000000A6		mov ecx, bq5c_size
 000006F0  83 C6 02		add esi, 2
 000006F3  BF 00004658 R	mov edi, OFFSET bq5c
 000006F8  F3/ A4		rep movsb
 000006FA  C6 05 000046FF R	mov bq5c[167], 0
	   00
 00000701  C7 05 00004947 R	mov addresses2[5 * TYPE addresses2], OFFSET bq5c
	   00004658 R
				
 0000070B  B9 00000050		mov ecx, bq6c_size
 00000710  83 C6 02		add esi, 2
 00000713  BF 000046FF R	mov edi, OFFSET bq6c
 00000718  F3/ A4		rep movsb
 0000071A  C6 05 00004750 R	mov bq6c[81], 0
	   00
 00000721  C7 05 0000494B R	mov addresses2[6 * TYPE addresses2], OFFSET bq6c
	   000046FF R
				
 0000072B  B9 0000008C		mov ecx, bq7c_size
 00000730  83 C6 02		add esi, 2
 00000733  BF 00004750 R	mov edi, OFFSET bq7c
 00000738  F3/ A4		rep movsb
 0000073A  C6 05 000047DD R	mov bq7c[141], 0
	   00
 00000741  C7 05 0000494F R	mov addresses2[7 * TYPE addresses2], OFFSET bq7c
	   00004750 R
				
 0000074B  B9 00000082		mov ecx, bq8c_size
 00000750  83 C6 02		add esi, 2
 00000753  BF 000047DD R	mov edi, OFFSET bq8c
 00000758  F3/ A4		rep movsb
 0000075A  C6 05 00004860 R	mov bq8c[131], 0
	   00
 00000761  C7 05 00004953 R	mov addresses2[8 * TYPE addresses2], OFFSET bq8c
	   000047DD R
				
 0000076B  B9 0000007B		mov ecx, bq9c_size
 00000770  83 C6 02		add esi, 2
 00000773  BF 00004860 R	mov edi, OFFSET bq9c
 00000778  F3/ A4		rep movsb
 0000077A  C6 05 000048DC R	mov bq9c[124], 0
	   00
 00000781  C7 05 00004957 R	mov addresses2[9 * TYPE addresses2], OFFSET bq9c
	   00004860 R
				
 0000078B  B9 00000056		mov ecx, bq10c_size
 00000790  83 C6 02		add esi, 2
 00000793  BF 000048DC R	mov edi, OFFSET bq10c
 00000798  F3/ A4		rep movsb
 0000079A  C6 05 00004933 R	mov bq10c[87], 0
	   00
 000007A1  C7 05 0000495B R	mov addresses2[10 * TYPE addresses2], OFFSET bq10c
	   000048DC R
				
				mWrite "Total bytes in file: "
 00004EED		     1		.data		
 00004EED 54 6F 74 61 6C     1		??0001 BYTE "Total bytes in file: ",0	
	   20 62 79 74 65
	   73 20 69 6E 20
	   66 69 6C 65 3A
	   20 00
 000007AB		     1		.code
 000007AB  52		     1		push	edx
 000007AC  BA 00004EED R     1		mov	edx,OFFSET ??0001
 000007B1  E8 00000000 E     1		call	WriteString
 000007B6  5A		     1		pop	edx
 000007B7  E8 00000000 E	call WriteDec
 000007BC  E8 00000000 E	call Crlf
 000007C1  E8 00000000 E	call Crlf
 000007C6  B9 0000000A		mov ecx, 10
 000007CB  8B 7D 0C		mov edi, answers2
 000007CE  8B 6D 08		mov ebp, questions2
 000007D1  BE 00000131 R	mov esi,offset arr2
 000007D6  83 C5 04		add ebp, 4
 000007D9  83 C7 04		add edi, 4
 000007DC			L3:
 000007DC  8B 55 00			mov edx, [ebp]
 000007DF  E8 00000000 E		call WriteString
 000007E4  E8 00000000 E		call crlf
 000007E9  83 C5 04			add ebp,4
 000007EC  83 C7 04			add edi,4
 000007EF  E8 00000000 E		call readdec
 000007F4  3A 06			cmp al,[esi]
 000007F6  75 03			jne E1
 000007F8  80 C3 02			add bl,2
 000007FB				E1:
 000007FB  46				inc esi
 000007FC  74 02			je S
 000007FE  E2 DC			loop l3
 00000800				S:
 00000800  E8 00000000 E		call crlf
 00000805  BA 00000167 R		mov edx,offset msg3
 0000080A  E8 00000000 E		call writestring
 0000080F  8A C3			mov al,bl
 00000811  E8 00000000 E		call writedec
 00000816  88 1D 00000150 R		mov scoreL2,bl
 0000081C  C6 45 10 00			mov scorelev2,0
 00000820  61				popad
				ret
 00000825			Level2_Print ENDP
				
 00000825			Level1_Print PROC, questions1:PTR DWORD, answers1:PTR DWORD, scoreLev1:BYTE
 00000828  60			pushad
 00000829  BA 0000409B R	mov edx, OFFSET filenames1
 0000082E  E8 00000000 E	call OpenInputFile
 00000833  A3 00004097 R	mov filehandles1, eax
				
 00000838  BA 00002D0F R	mov edx, OFFSET buffers1
 0000083D  B9 00001388		mov ecx, bufferSize1
 00000842  E8 00000000 E	call ReadFromFile
 00000847  A3 000040A6 R	mov bytesReads1, eax
				
 0000084C  B9 00000042		mov ecx, aq1c_size
 00000851  BE 00002D0F R	mov esi, OFFSET buffers1
 00000856  BF 000040D6 R	mov edi, OFFSET aq1c
 0000085B  F3/ A4		rep movsb
 0000085D  C6 05 00004119 R	mov aq1c[67], 0
	   00
 00000864  C7 05 00004EAF R	mov addresses1[1 * TYPE addresses1], OFFSET aq1c
	   000040D6 R
				
 0000086E  B9 00000043		mov ecx, aq2c_size
 00000873  83 C6 02		add esi, 2
 00000876  BF 00004119 R	mov edi, OFFSET aq2c
 0000087B  F3/ A4		rep movsb
 0000087D  C6 05 0000415D R	mov aq2c[68], 0
	   00
 00000884  C7 05 00004EB3 R	mov addresses1[2 * TYPE addresses1], OFFSET aq2c
	   00004119 R
				
 0000088E  B9 00000065		mov ecx, aq3c_size
 00000893  83 C6 02		add esi, 2
 00000896  BF 0000415D R	mov edi, OFFSET aq3c
 0000089B  F3/ A4		rep movsb
 0000089D  C6 05 000041C3 R	mov aq3c[102], 0
	   00
 000008A4  C7 05 00004EB7 R	mov addresses1[3 * TYPE addresses1], OFFSET aq3c
	   0000415D R
				
 000008AE  B9 00000065		mov ecx, aq4c_size
 000008B3  83 C6 02		add esi, 2
 000008B6  BF 000041C4 R	mov edi, OFFSET aq4c
 000008BB  F3/ A4		rep movsb
 000008BD  C6 05 00004229 R	mov aq4c[101], 0
	   00
 000008C4  C7 05 00004EBB R	mov addresses1[4 * TYPE addresses1], OFFSET aq4c
	   000041C4 R
				
 000008CE  B9 00000045		mov ecx, aq5c_size
 000008D3  83 C6 02		add esi, 2
 000008D6  BF 0000422A R	mov edi, OFFSET aq5c
 000008DB  F3/ A4		rep movsb
 000008DD  C6 05 00004270 R	mov aq5c[70], 0
	   00
 000008E4  C7 05 00004EBF R	mov addresses1[5 * TYPE addresses1], OFFSET aq5c
	   0000422A R
				
 000008EE  B9 00000066		mov ecx, aq6c_size
 000008F3  83 C6 02		add esi, 2
 000008F6  BF 00004270 R	mov edi, OFFSET aq6c
 000008FB  F3/ A4		rep movsb
 000008FD  C6 05 000042D7 R	mov aq6c[103], 0
	   00
 00000904  C7 05 00004EC3 R	mov addresses1[6 * TYPE addresses1], OFFSET aq6c
	   00004270 R
				
 0000090E  B9 00000059		mov ecx, aq7c_size
 00000913  83 C6 02		add esi, 2
 00000916  BF 000042D7 R	mov edi, OFFSET aq7c
 0000091B  F3/ A4		rep movsb
 0000091D  C6 05 00004331 R	mov aq7c[90], 0
	   00
 00000924  C7 05 00004EC7 R	mov addresses1[7 * TYPE addresses1], OFFSET aq7c
	   000042D7 R
				
 0000092E  B9 00000059		mov ecx, aq8c_size
 00000933  83 C6 02		add esi, 2
 00000936  BF 00004331 R	mov edi, OFFSET aq8c
 0000093B  F3/ A4		rep movsb
 0000093D  C6 05 0000438B R	mov aq8c[90], 0
	   00
 00000944  C7 05 00004ECB R	mov addresses1[8 * TYPE addresses1], OFFSET aq8c
	   00004331 R
				
 0000094E  B9 0000007C		mov ecx, aq9c_size
 00000953  83 C6 02		add esi, 2
 00000956  BF 0000438B R	mov edi, OFFSET aq9c
 0000095B  F3/ A4		rep movsb
 0000095D  C6 05 00004408 R	mov aq9c[125], 0
	   00
 00000964  C7 05 00004ECF R	mov addresses1[9 * TYPE addresses1], OFFSET aq9c
	   0000438B R
				
 0000096E  B9 0000003A		mov ecx, aq10c_size
 00000973  83 C6 02		add esi, 2
 00000976  BF 00004408 R	mov edi, OFFSET aq10c
 0000097B  F3/ A4		rep movsb
 0000097D  C6 05 00004443 R	mov aq10c[59], 0
	   00
 00000984  C7 05 00004ED3 R	mov addresses1[10 * TYPE addresses1], OFFSET aq10c
	   00004408 R
				
				mWrite "Total bytes in file: "
 00004F03		     1		.data		
 00004F03 54 6F 74 61 6C     1		??0002 BYTE "Total bytes in file: ",0	
	   20 62 79 74 65
	   73 20 69 6E 20
	   66 69 6C 65 3A
	   20 00
 0000098E		     1		.code
 0000098E  52		     1		push	edx
 0000098F  BA 00004F03 R     1		mov	edx,OFFSET ??0002
 00000994  E8 00000000 E     1		call	WriteString
 00000999  5A		     1		pop	edx
 0000099A  E8 00000000 E	call WriteDec
 0000099F  E8 00000000 E	call Crlf
 000009A4  E8 00000000 E	call Crlf
 000009A9  B9 0000000A		mov ecx, 10
 000009AE  8B 7D 0C		mov edi, answers1
 000009B1  8B 6D 08		mov ebp, questions1
 000009B4  BE 00000127 R	mov esi,offset arr1
 000009B9  83 C5 04		add ebp, 4
 000009BC  83 C7 04		add edi, 4
 000009BF			L3:
 000009BF  8B 55 00			mov edx, [ebp]
 000009C2  E8 00000000 E		call WriteString
 000009C7  E8 00000000 E		call crlf
 000009CC  83 C5 04			add ebp,4
 000009CF  83 C7 04			add edi,4
 000009D2  E8 00000000 E		call readdec
 000009D7  3A 06			cmp al,[esi]
 000009D9  75 03			jne E1
 000009DB  80 C3 01			add bl,1
 000009DE				E1:
 000009DE  46				inc esi
 000009DF  74 02			je S
 000009E1  E2 DC			loop l3
 000009E3				S:
 000009E3  E8 00000000 E		call crlf
 000009E8  BA 00000152 R		mov edx,offset msg1
 000009ED  E8 00000000 E		call writestring
 000009F2  8A C3			mov al,bl
 000009F4  E8 00000000 E		call writedec
 000009F9  88 1D 0000014F R		mov scoreL1,bl
 000009FF  C6 45 10 00			mov scorelev1,0
 00000A03  61				popad
				ret
 00000A08			Level1_Print ENDP
				
				
				
				;////////////////QUIZ FUNCTIONS DEFINATION
 00000A08			QLevel1_Print PROC, questions1:PTR DWORD, answers1:PTR DWORD, scoreLev1:BYTE
 00000A0B  60			pushad
 00000A0C  BA 0000409B R	mov edx, OFFSET filenames1
 00000A11  E8 00000000 E	call OpenInputFile
 00000A16  A3 00004097 R	mov filehandles1, eax
				
 00000A1B  BA 00002D0F R	mov edx, OFFSET buffers1
 00000A20  B9 00001388		mov ecx, bufferSize1
 00000A25  E8 00000000 E	call ReadFromFile
 00000A2A  A3 000040A6 R	mov bytesReads1, eax
				
 00000A2F  B9 00000042		mov ecx, aq1c_size
 00000A34  BE 00002D0F R	mov esi, OFFSET buffers1
 00000A39  BF 000040D6 R	mov edi, OFFSET aq1c
 00000A3E  F3/ A4		rep movsb
 00000A40  C6 05 00004119 R	mov aq1c[67], 0
	   00
 00000A47  C7 05 00004EAF R	mov addresses1[1 * TYPE addresses1], OFFSET aq1c
	   000040D6 R
				
 00000A51  B9 00000043		mov ecx, aq2c_size
 00000A56  83 C6 02		add esi, 2
 00000A59  BF 00004119 R	mov edi, OFFSET aq2c
 00000A5E  F3/ A4		rep movsb
 00000A60  C6 05 0000415D R	mov aq2c[68], 0
	   00
 00000A67  C7 05 00004EB3 R	mov addresses1[2 * TYPE addresses1], OFFSET aq2c
	   00004119 R
				
 00000A71  B9 00000065		mov ecx, aq3c_size
 00000A76  83 C6 02		add esi, 2
 00000A79  BF 0000415D R	mov edi, OFFSET aq3c
 00000A7E  F3/ A4		rep movsb
 00000A80  C6 05 000041C3 R	mov aq3c[102], 0
	   00
 00000A87  C7 05 00004EB7 R	mov addresses1[3 * TYPE addresses1], OFFSET aq3c
	   0000415D R
				
 00000A91  B9 00000065		mov ecx, aq4c_size
 00000A96  83 C6 02		add esi, 2
 00000A99  BF 000041C4 R	mov edi, OFFSET aq4c
 00000A9E  F3/ A4		rep movsb
 00000AA0  C6 05 00004229 R	mov aq4c[101], 0
	   00
 00000AA7  C7 05 00004EBB R	mov addresses1[4 * TYPE addresses1], OFFSET aq4c
	   000041C4 R
				
 00000AB1  B9 00000045		mov ecx, aq5c_size
 00000AB6  83 C6 02		add esi, 2
 00000AB9  BF 0000422A R	mov edi, OFFSET aq5c
 00000ABE  F3/ A4		rep movsb
 00000AC0  C6 05 00004270 R	mov aq5c[70], 0
	   00
 00000AC7  C7 05 00004EBF R	mov addresses1[5 * TYPE addresses1], OFFSET aq5c
	   0000422A R
				
 00000AD1  B9 00000066		mov ecx, aq6c_size
 00000AD6  83 C6 02		add esi, 2
 00000AD9  BF 00004270 R	mov edi, OFFSET aq6c
 00000ADE  F3/ A4		rep movsb
 00000AE0  C6 05 000042D7 R	mov aq6c[103], 0
	   00
 00000AE7  C7 05 00004EC3 R	mov addresses1[6 * TYPE addresses1], OFFSET aq6c
	   00004270 R
				
 00000AF1  B9 00000059		mov ecx, aq7c_size
 00000AF6  83 C6 02		add esi, 2
 00000AF9  BF 000042D7 R	mov edi, OFFSET aq7c
 00000AFE  F3/ A4		rep movsb
 00000B00  C6 05 00004331 R	mov aq7c[90], 0
	   00
 00000B07  C7 05 00004EC7 R	mov addresses1[7 * TYPE addresses1], OFFSET aq7c
	   000042D7 R
				
 00000B11  B9 00000059		mov ecx, aq8c_size
 00000B16  83 C6 02		add esi, 2
 00000B19  BF 00004331 R	mov edi, OFFSET aq8c
 00000B1E  F3/ A4		rep movsb
 00000B20  C6 05 0000438B R	mov aq8c[90], 0
	   00
 00000B27  C7 05 00004ECB R	mov addresses1[8 * TYPE addresses1], OFFSET aq8c
	   00004331 R
				
 00000B31  B9 0000007C		mov ecx, aq9c_size
 00000B36  83 C6 02		add esi, 2
 00000B39  BF 0000438B R	mov edi, OFFSET aq9c
 00000B3E  F3/ A4		rep movsb
 00000B40  C6 05 00004408 R	mov aq9c[125], 0
	   00
 00000B47  C7 05 00004ECF R	mov addresses1[9 * TYPE addresses1], OFFSET aq9c
	   0000438B R
				
 00000B51  B9 0000003A		mov ecx, aq10c_size
 00000B56  83 C6 02		add esi, 2
 00000B59  BF 00004408 R	mov edi, OFFSET aq10c
 00000B5E  F3/ A4		rep movsb
 00000B60  C6 05 00004443 R	mov aq10c[59], 0
	   00
 00000B67  C7 05 00004ED3 R	mov addresses1[10 * TYPE addresses1], OFFSET aq10c
	   00004408 R
				
				mWrite "Total bytes in file: "
 00004F19		     1		.data		
 00004F19 54 6F 74 61 6C     1		??0003 BYTE "Total bytes in file: ",0	
	   20 62 79 74 65
	   73 20 69 6E 20
	   66 69 6C 65 3A
	   20 00
 00000B71		     1		.code
 00000B71  52		     1		push	edx
 00000B72  BA 00004F19 R     1		mov	edx,OFFSET ??0003
 00000B77  E8 00000000 E     1		call	WriteString
 00000B7C  5A		     1		pop	edx
 00000B7D  E8 00000000 E	call WriteDec
 00000B82  E8 00000000 E	call Crlf
 00000B87  E8 00000000 E	call Crlf
 00000B8C  B9 0000000A		mov ecx, 10
 00000B91  8B 7D 0C		mov edi, answers1
 00000B94  8B 6D 08		mov ebp, questions1
 00000B97  BE 00000127 R	mov esi,offset arr1
 00000B9C  83 C5 04		add ebp, 4
 00000B9F  83 C7 04		add edi, 4
 00000BA2			L3:
 00000BA2  8B 55 00			mov edx, [ebp]
 00000BA5  E8 00000000 E		call WriteString
 00000BAA  E8 00000000 E		call crlf
 00000BAF  83 C5 04			add ebp,4
 00000BB2  83 C7 04			add edi,4
 00000BB5  E8 00000000 E		call readdec
 00000BBA  3A 06			cmp al,[esi]
 00000BBC  75 05			jne E1
 00000BBE  80 C3 01			add bl,1
 00000BC1  EB 0F			jmp E2
 00000BC3				E1:
 00000BC3  FE 0D 00000364 R		DEC life
 00000BC9  A0 00000364 R		mov al,life
 00000BCE  3C 00			cmp al,0
 00000BD0  74 03			je S
 00000BD2				E2:
 00000BD2  46				inc esi
 00000BD3  E2 CD			loop l3
 00000BD5				S:
 00000BD5  E8 00000000 E		call crlf
 00000BDA  BA 00000152 R		mov edx,offset msg1
 00000BDF  E8 00000000 E		call writestring
 00000BE4  8A C3			mov al,bl
 00000BE6  E8 00000000 E		call writedec
 00000BEB  88 1D 0000014F R		mov scoreL1,bl
 00000BF1  C6 45 10 00			mov scorelev1,0
 00000BF5  61				popad
				ret
 00000BFA			QLevel1_Print ENDP
				
 00000BFA			QLevel2_Print PROC, questions2:PTR DWORD, answers2:PTR DWORD, scoreLev2:BYTE
 00000BFD  60			pushad
 00000BFE  BA 00002CD4 R	mov edx, OFFSET filenames2
 00000C03  E8 00000000 E	call OpenInputFile
 00000C08  A3 00002CD0 R	mov filehandles2, eax
				
 00000C0D  BA 00001948 R	mov edx, OFFSET buffers2
 00000C12  B9 00001388		mov ecx, bufferSize2
 00000C17  E8 00000000 E	call ReadFromFile
 00000C1C  A3 00002CDF R	mov bytesReads2, eax
				
 00000C21  B9 00000052		mov ecx, bq1c_size
 00000C26  BE 00001948 R	mov esi, OFFSET buffers2
 00000C2B  BF 0000446F R	mov edi, OFFSET bq1c
 00000C30  F3/ A4rep movsb
 00000C32  C6 05 000044C2 R	mov bq1c[83], 0
	   00
 00000C39  C7 05 00004937 R	mov addresses2[1 * TYPE addresses2], OFFSET bq1c
	   0000446F R
				
 00000C43  B9 0000004B		mov ecx, bq2c_size
 00000C48  83 C6 02		add esi, 2
 00000C4B  BF 000044C2 R	mov edi, OFFSET bq2c
 00000C50  F3/ A4		rep movsb
 00000C52  C6 05 0000450E R	mov bq2c[76], 0
	   00
 00000C59  C7 05 0000493B R	mov addresses2[2 * TYPE addresses2], OFFSET bq2c
	   000044C2 R
				
 00000C63  B9 0000009D		mov ecx, bq3c_size
 00000C68  83 C6 02		add esi, 2
 00000C6B  BF 0000450E R	mov edi, OFFSET bq3c
 00000C70  F3/ A4		rep movsb
 00000C72  C6 05 000045AC R	mov bq3c[158], 0
	   00
 00000C79  C7 05 0000493F R	mov addresses2[3 * TYPE addresses2], OFFSET bq3c
	   0000450E R
				
 00000C83  B9 000000AB		mov ecx, bq4c_size
 00000C88  83 C6 02		add esi, 2
 00000C8B  BF 000045AC R	mov edi, OFFSET bq4c
 00000C90  F3/ A4		rep movsb
 00000C92  C6 05 00004658 R	mov bq4c[172], 0
	   00
 00000C99  C7 05 00004943 R	mov addresses2[4 * TYPE addresses2], OFFSET bq4c
	   000045AC R
				
 00000CA3  B9 000000A6		mov ecx, bq5c_size
 00000CA8  83 C6 02		add esi, 2
 00000CAB  BF 00004658 R	mov edi, OFFSET bq5c
 00000CB0  F3/ A4		rep movsb
 00000CB2  C6 05 000046FD R	mov bq5c[165], 0
	   00
 00000CB9  C7 05 00004947 R	mov addresses2[5 * TYPE addresses2], OFFSET bq5c
	   00004658 R
				
 00000CC3  B9 00000050		mov ecx, bq6c_size
 00000CC8  83 C6 02		add esi, 2
 00000CCB  BF 000046FF R	mov edi, OFFSET bq6c
 00000CD0  F3/ A4		rep movsb
 00000CD2  C6 05 00004750 R	mov bq6c[81], 0
	   00
 00000CD9  C7 05 0000494B R	mov addresses2[6 * TYPE addresses2], OFFSET bq6c
	   000046FF R
				
 00000CE3  B9 0000008C		mov ecx, bq7c_size
 00000CE8  83 C6 02		add esi, 2
 00000CEB  BF 00004750 R	mov edi, OFFSET bq7c
 00000CF0  F3/ A4		rep movsb
 00000CF2  C6 05 000047DD R	mov bq7c[141], 0
	   00
 00000CF9  C7 05 0000494F R	mov addresses2[7 * TYPE addresses2], OFFSET bq7c
	   00004750 R
				
 00000D03  B9 00000082		mov ecx, bq8c_size
 00000D08  83 C6 02		add esi, 2
 00000D0B  BF 000047DD R	mov edi, OFFSET bq8c
 00000D10  F3/ A4		rep movsb
 00000D12  C6 05 00004860 R	mov bq8c[131], 0
	   00
 00000D19  C7 05 00004953 R	mov addresses2[8 * TYPE addresses2], OFFSET bq8c
	   000047DD R
				
 00000D23  B9 0000007B		mov ecx, bq9c_size
 00000D28  83 C6 02		add esi, 2
 00000D2B  BF 00004860 R	mov edi, OFFSET bq9c
 00000D30  F3/ A4		rep movsb
 00000D32  C6 05 000048DC R	mov bq9c[124], 0
	   00
 00000D39  C7 05 00004957 R	mov addresses2[9 * TYPE addresses2], OFFSET bq9c
	   00004860 R
				
 00000D43  B9 00000056		mov ecx, bq10c_size
 00000D48  83 C6 02		add esi, 2
 00000D4B  BF 000048DC R	mov edi, OFFSET bq10c
 00000D50  F3/ A4		rep movsb
 00000D52  C6 05 00004933 R	mov bq10c[87], 0
	   00
 00000D59  C7 05 0000495B R	mov addresses2[10 * TYPE addresses2], OFFSET bq10c
	   000048DC R
				
				mWrite "Total bytes in file: "
 00004F2F		     1		.data		
 00004F2F 54 6F 74 61 6C     1		??0004 BYTE "Total bytes in file: ",0	
	   20 62 79 74 65
	   73 20 69 6E 20
	   66 69 6C 65 3A
	   20 00
 00000D63		     1		.code
 00000D63  52		     1		push	edx
 00000D64  BA 00004F2F R     1		mov	edx,OFFSET ??0004
 00000D69  E8 00000000 E     1		call	WriteString
 00000D6E  5A		     1		pop	edx
 00000D6F  E8 00000000 E	call WriteDec
 00000D74  E8 00000000 E	call Crlf
 00000D79  E8 00000000 E	call Crlf
 00000D7E  B9 0000000A		mov ecx, 10
 00000D83  8B 7D 0C		mov edi, answers2
 00000D86  8B 6D 08		mov ebp, questions2
 00000D89  BE 00000131 R	mov esi,offset arr2
 00000D8E  83 C5 04		add ebp, 4
 00000D91  83 C7 04		add edi, 4
 00000D94			L3:
 00000D94  8B 55 00			mov edx, [ebp]
 00000D97  E8 00000000 E		call WriteString
 00000D9C  E8 00000000 E		call crlf
 00000DA1  83 C5 04			add ebp,4
 00000DA4  83 C7 04			add edi,4
 00000DA7  E8 00000000 E		call readdec
 00000DAC  3A 06			cmp al,[esi]
 00000DAE  75 05			jne E1
 00000DB0  80 C3 02			add bl,2
 00000DB3  EB 0F			jmp E2
 00000DB5				E1:
 00000DB5  FE 0D 00000364 R		DEC life
 00000DBB  A0 00000364 R		mov al,life
 00000DC0  3C 00			cmp al,0
 00000DC2  74 03			je S
 00000DC4				E2:
 00000DC4  46				inc esi
 00000DC5  E2 CD			loop l3
 00000DC7				S:
 00000DC7  E8 00000000 E		call crlf
 00000DCC  BA 00000167 R		mov edx,offset msg3
 00000DD1  E8 00000000 E		call writestring
 00000DD6  8A C3			mov al,bl
 00000DD8  E8 00000000 E		call writedec
 00000DDD  88 1D 00000150 R		mov scoreL2,bl
 00000DE3  C6 45 10 00			mov scorelev2,0
 00000DE7  61				popad
				ret
 00000DEC			QLevel2_Print ENDP
				
 00000DEC			QLevel3_Print PROC, questions:PTR DWORD, answers:PTR DWORD, scoreLev3:BYTE
 00000DEF  60			pushad
 00000DF0  BA 0000190E R	mov edx, OFFSET filenames
 00000DF5  E8 00000000 E	call OpenInputFile
 00000DFA  A3 0000190A R	mov filehandles, eax
				
 00000DFF  BA 00000582 R	mov edx, OFFSET buffers
 00000E04  B9 00001388		mov ecx, bufferSize
 00000E09  E8 00000000 E	call ReadFromFile
 00000E0E  A3 00001918 R	mov bytesReads, eax
				
 00000E13  B9 0000005A		mov ecx, cq1c_size
 00000E18  BE 00000582 R	mov esi, OFFSET buffers
 00000E1D  BF 0000495F R	mov edi, OFFSET cq1c
 00000E22  F3/ A4		rep movsb
 00000E24  C6 05 000049BA R	mov cq1c[91], 0
	   00
 00000E2B  C7 05 00004447 R	mov addresses[1 * TYPE addresses], OFFSET cq1c
	   0000495F R
				
 00000E35  B9 000000B7		mov ecx, cq2c_size
 00000E3A  83 C6 02		add esi, 2
 00000E3D  BF 000049BA R	mov edi, OFFSET cq2c
 00000E42  F3/ A4		rep movsb
 00000E44  C6 05 00004A72 R	mov cq2c[184], 0
	   00
 00000E4B  C7 05 0000444B R	mov addresses[2 * TYPE addresses], OFFSET cq2c
	   000049BA R
				
 00000E55  B9 00000097		mov ecx, cq3c_size
 00000E5A  83 C6 02		add esi, 2
 00000E5D  BF 00004A72 R	mov edi, OFFSET cq3c
 00000E62  F3/ A4		rep movsb
 00000E64  C6 05 00004B0A R	mov cq3c[152], 0
	   00
 00000E6B  C7 05 0000444F R	mov addresses[3 * TYPE addresses], OFFSET cq3c
	   00004A72 R
				
 00000E75  B9 000000DC		mov ecx, cq4c_size
 00000E7A  83 C6 02		add esi, 2
 00000E7D  BF 00004B0A R	mov edi, OFFSET cq4c
 00000E82  F3/ A4		rep movsb
 00000E84  C6 05 00004BE7 R	mov cq4c[221], 0
	   00
 00000E8B  C7 05 00004453 R	mov addresses[4 * TYPE addresses], OFFSET cq4c
	   00004B0A R
				
 00000E95  B9 00000063		mov ecx, cq5c_size
 00000E9A  83 C6 02		add esi, 2
 00000E9D  BF 00004BE7 R	mov edi, OFFSET cq5c
 00000EA2  F3/ A4		rep movsb
 00000EA4  C6 05 00004C4B R	mov cq5c[100], 0
	   00
 00000EAB  C7 05 00004457 R	mov addresses[5 * TYPE addresses], OFFSET cq5c
	   00004BE7 R
				
 00000EB5  B9 000000D8		mov ecx, cq6c_size
 00000EBA  83 C6 02		add esi, 2
 00000EBD  BF 00004C4B R	mov edi, OFFSET cq6c
 00000EC2  F3/ A4		rep movsb
 00000EC4  C6 05 00004D24 R	mov cq6c[217], 0
	   00
 00000ECB  C7 05 0000445B R	mov addresses[6 * TYPE addresses], OFFSET cq6c
	   00004C4B R
				
 00000ED5  B9 0000004B		mov ecx, cq7c_size
 00000EDA  83 C6 02		add esi, 2
 00000EDD  BF 00004D24 R	mov edi, OFFSET cq7c
 00000EE2  F3/ A4		rep movsb
 00000EE4  C6 05 00004D70 R	mov cq7c[76], 0
	   00
 00000EEB  C7 05 0000445F R	mov addresses[7 * TYPE addresses], OFFSET cq7c
	   00004D24 R
				
 00000EF5  B9 0000005F		mov ecx, cq8c_size
 00000EFA  83 C6 02		add esi, 2
 00000EFD  BF 00004D70 R	mov edi, OFFSET cq8c
 00000F02  F3/ A4		rep movsb
 00000F04  C6 05 00004DD0 R	mov cq8c[96], 0
	   00
 00000F0B  C7 05 00004463 R	mov addresses[8 * TYPE addresses], OFFSET cq8c
	   00004D70 R
				
 00000F15  B9 00000073		mov ecx, cq9c_size
 00000F1A  83 C6 02		add esi, 2
 00000F1D  BF 00004DD0 R	mov edi, OFFSET cq9c
 00000F22  F3/ A4		rep movsb
 00000F24  C6 05 00004E44 R	mov cq9c[116], 0
	   00
 00000F2B  C7 05 00004467 R	mov addresses[9 * TYPE addresses], OFFSET cq9c
	   00004DD0 R
				
 00000F35  B9 00000066		mov ecx, cq10c_size
 00000F3A  83 C6 02		add esi, 2
 00000F3D  BF 00004E44 R	mov edi, OFFSET cq10c
 00000F42  F3/ A4		rep movsb
 00000F44  C6 05 00004EAB R	mov cq10c[103], 0
	   00
 00000F4B  C7 05 0000446B R	mov addresses[10 * TYPE addresses], OFFSET cq10c
	   00004E44 R
				
				mWrite "Total bytes in file: "
 00004F45		     1		.data		
 00004F45 54 6F 74 61 6C     1		??0005 BYTE "Total bytes in file: ",0	
	   20 62 79 74 65
	   73 20 69 6E 20
	   66 69 6C 65 3A
	   20 00
 00000F55		     1		.code
 00000F55  52		     1		push	edx
 00000F56  BA 00004F45 R     1		mov	edx,OFFSET ??0005
 00000F5B  E8 00000000 E     1		call	WriteString
 00000F60  5A		     1		pop	edx
 00000F61  E8 00000000 E	call WriteDec
 00000F66  E8 00000000 E	call Crlf
 00000F6B  E8 00000000 E	call Crlf
 00000F70  B9 0000000A		mov ecx, 10
 00000F75  8B 7D 0C		mov edi, answers
 00000F78  8B 6D 08		mov ebp, questions
 00000F7B  BE 0000013B R	mov esi,offset arr3
 00000F80  83 C5 04		add ebp, 4
 00000F83  83 C7 04		add edi, 4
 00000F86			L3:
 00000F86  8B 55 00			mov edx, [ebp]
 00000F89  E8 00000000 E		call WriteString
 00000F8E  E8 00000000 E		call crlf
 00000F93  83 C5 04			add ebp,4
 00000F96  83 C7 04			add edi,4
 00000F99  E8 00000000 E		call readdec
 00000F9E  3A 06			cmp al,[esi]
 00000FA0  75 05			jne E1
 00000FA2  80 C3 03			add bl,3
 00000FA5  EB 0F			jmp E2
 00000FA7				E1:
 00000FA7  FE 0D 00000364 R		DEC life
 00000FAD  A0 00000364 R		mov al,life
 00000FB2  3C 00			cmp al,0
 00000FB4  74 03			je S
 00000FB6				E2:
 00000FB6  46				inc esi
 00000FB7  E2 CD			loop l3
 00000FB9				S:
 00000FB9  E8 00000000 E		call crlf
 00000FBE  BA 0000017C R		mov edx,offset msg4
 00000FC3  E8 00000000 E		call writestring
 00000FC8  8A C3			mov al,bl
 00000FCA  E8 00000000 E		call writedec
 00000FCF  88 1D 00000151 R		mov scoreL3,bl
 00000FD5  C6 45 10 00			mov scorelev3,0
 00000FD9  61				popad
				ret
 00000FDE			QLevel3_Print ENDP
				
				
				END main
Microsoft (R) Macro Assembler Version 14.29.30147.0	    12/13/22 08:23:52
My First Projec					     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00004F5B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000FDE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Level1_Print . . . . . . . . . .	P Near	 00000825 _TEXT	Length= 000001E3 Public STDCALL
  questions1 . . . . . . . . . .	DWord	 bp + 00000008
  answers1 . . . . . . . . . . .	DWord	 bp + 0000000C
  scoreLev1  . . . . . . . . . .	Byte	 bp + 00000010
  L3 . . . . . . . . . . . . . .	L Near	 000009BF _TEXT	
  E1 . . . . . . . . . . . . . .	L Near	 000009DE _TEXT	
  S  . . . . . . . . . . . . . .	L Near	 000009E3 _TEXT	
Level2_Print . . . . . . . . . .	P Near	 00000642 _TEXT	Length= 000001E3 Public STDCALL
  questions2 . . . . . . . . . .	DWord	 bp + 00000008
  answers2 . . . . . . . . . . .	DWord	 bp + 0000000C
  scoreLev2  . . . . . . . . . .	Byte	 bp + 00000010
  L3 . . . . . . . . . . . . . .	L Near	 000007DC _TEXT	
  E1 . . . . . . . . . . . . . .	L Near	 000007FB _TEXT	
  S  . . . . . . . . . . . . . .	L Near	 00000800 _TEXT	
Level3_Print . . . . . . . . . .	P Near	 0000045F _TEXT	Length= 000001E3 Public STDCALL
  questions  . . . . . . . . . .	DWord	 bp + 00000008
  answers  . . . . . . . . . . .	DWord	 bp + 0000000C
  scoreLev3  . . . . . . . . . .	Byte	 bp + 00000010
  L3 . . . . . . . . . . . . . .	L Near	 000005F9 _TEXT	
  E1 . . . . . . . . . . . . . .	L Near	 00000618 _TEXT	
  S  . . . . . . . . . . . . . .	L Near	 0000061D _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Percentage . . . . . . . . . . .	P Near	 00000371 _TEXT	Length= 0000004B Public STDCALL
QLevel1_Print  . . . . . . . . .	P Near	 00000A08 _TEXT	Length= 000001F2 Public STDCALL
  questions1 . . . . . . . . . .	DWord	 bp + 00000008
  answers1 . . . . . . . . . . .	DWord	 bp + 0000000C
  scoreLev1  . . . . . . . . . .	Byte	 bp + 00000010
  L3 . . . . . . . . . . . . . .	L Near	 00000BA2 _TEXT	
  E1 . . . . . . . . . . . . . .	L Near	 00000BC3 _TEXT	
  E2 . . . . . . . . . . . . . .	L Near	 00000BD2 _TEXT	
  S  . . . . . . . . . . . . . .	L Near	 00000BD5 _TEXT	
QLevel2_Print  . . . . . . . . .	P Near	 00000BFA _TEXT	Length= 000001F2 Public STDCALL
  questions2 . . . . . . . . . .	DWord	 bp + 00000008
  answers2 . . . . . . . . . . .	DWord	 bp + 0000000C
  scoreLev2  . . . . . . . . . .	Byte	 bp + 00000010
  L3 . . . . . . . . . . . . . .	L Near	 00000D94 _TEXT	
  E1 . . . . . . . . . . . . . .	L Near	 00000DB5 _TEXT	
  E2 . . . . . . . . . . . . . .	L Near	 00000DC4 _TEXT	
  S  . . . . . . . . . . . . . .	L Near	 00000DC7 _TEXT	
QLevel3_Print  . . . . . . . . .	P Near	 00000DEC _TEXT	Length= 000001F2 Public STDCALL
  questions  . . . . . . . . . .	DWord	 bp + 00000008
  answers  . . . . . . . . . . .	DWord	 bp + 0000000C
  scoreLev3  . . . . . . . . . .	Byte	 bp + 00000010
  L3 . . . . . . . . . . . . . .	L Near	 00000F86 _TEXT	
  E1 . . . . . . . . . . . . . .	L Near	 00000FA7 _TEXT	
  E2 . . . . . . . . . . . . . .	L Near	 00000FB6 _TEXT	
  S  . . . . . . . . . . . . . .	L Near	 00000FB9 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000326 Public STDCALL
  file_ok  . . . . . . . . . . .	L Near	 0000002A _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000092 _TEXT	
  Quiz . . . . . . . . . . . . .	L Near	 0000018E _TEXT	
  I1 . . . . . . . . . . . . . .	L Near	 0000029B _TEXT	
  I2 . . . . . . . . . . . . . .	L Near	 000002C5 _TEXT	
  I3 . . . . . . . . . . . . . .	L Near	 000002F0 _TEXT	
  exi  . . . . . . . . . . . . .	L Near	 0000031F _TEXT	
outputfile . . . . . . . . . . .	P Near	 00000442 _TEXT	Length= 0000001D Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
reward . . . . . . . . . . . . .	P Near	 00000326 _TEXT	Length= 0000004B Public STDCALL
  L5 . . . . . . . . . . . . . .	L Near	 0000033A _TEXT	
  Rw . . . . . . . . . . . . . .	L Near	 00000360 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
spaces . . . . . . . . . . . . .	P Near	 00000428 _TEXT	Length= 0000001A Public STDCALL
standing . . . . . . . . . . . .	P Near	 000003BC _TEXT	Length= 0000006C Public STDCALL
  EQUAL  . . . . . . . . . . . .	L Near	 000003F7 _TEXT	
  GREATER  . . . . . . . . . . .	L Near	 00000412 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00004ED7 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00004EED _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00004F03 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00004F19 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00004F2F _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00004F45 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 000001F5h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
Opt  . . . . . . . . . . . . . .	Byte	 00000316 _DATA	
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
QuizScore  . . . . . . . . . . .	Byte	 000002F4 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TotalScore . . . . . . . . . . .	Word	 00000365 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
addresses1 . . . . . . . . . . .	DWord	 00004EAB _DATA	
addresses2 . . . . . . . . . . .	DWord	 00004933 _DATA	
addresses  . . . . . . . . . . .	DWord	 00004443 _DATA	
answer_arrays1 . . . . . . . . .	DWord	 000040AA _DATA	
answer_arrays2 . . . . . . . . .	DWord	 00002CE3 _DATA	
answer_arrays  . . . . . . . . .	DWord	 0000191C _DATA	
aq10c_size . . . . . . . . . . .	Number	 0000003Ah   
aq10c  . . . . . . . . . . . . .	Byte	 00004408 _DATA	
aq1c_size  . . . . . . . . . . .	Number	 00000042h   
aq1c . . . . . . . . . . . . . .	Byte	 000040D6 _DATA	
aq2c_size  . . . . . . . . . . .	Number	 00000043h   
aq2c . . . . . . . . . . . . . .	Byte	 00004119 _DATA	
aq3c_size  . . . . . . . . . . .	Number	 00000065h   
aq3c . . . . . . . . . . . . . .	Byte	 0000415D _DATA	
aq4c_size  . . . . . . . . . . .	Number	 00000065h   
aq4c . . . . . . . . . . . . . .	Byte	 000041C4 _DATA	
aq5c_size  . . . . . . . . . . .	Number	 00000045h   
aq5c . . . . . . . . . . . . . .	Byte	 0000422A _DATA	
aq6c_size  . . . . . . . . . . .	Number	 00000066h   
aq6c . . . . . . . . . . . . . .	Byte	 00004270 _DATA	
aq7c_size  . . . . . . . . . . .	Number	 00000059h   
aq7c . . . . . . . . . . . . . .	Byte	 000042D7 _DATA	
aq8c_size  . . . . . . . . . . .	Number	 00000059h   
aq8c . . . . . . . . . . . . . .	Byte	 00004331 _DATA	
aq9c_size  . . . . . . . . . . .	Number	 0000007Ch   
aq9c . . . . . . . . . . . . . .	Byte	 0000438B _DATA	
arr1 . . . . . . . . . . . . . .	Byte	 00000127 _DATA	
arr2 . . . . . . . . . . . . . .	Byte	 00000131 _DATA	
arr3 . . . . . . . . . . . . . .	Byte	 0000013B _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
bq10c_size . . . . . . . . . . .	Number	 00000056h   
bq10c  . . . . . . . . . . . . .	Byte	 000048DC _DATA	
bq1c_size  . . . . . . . . . . .	Number	 00000052h   
bq1c . . . . . . . . . . . . . .	Byte	 0000446F _DATA	
bq2c_size  . . . . . . . . . . .	Number	 0000004Bh   
bq2c . . . . . . . . . . . . . .	Byte	 000044C2 _DATA	
bq3c_size  . . . . . . . . . . .	Number	 0000009Dh   
bq3c . . . . . . . . . . . . . .	Byte	 0000450E _DATA	
bq4c_size  . . . . . . . . . . .	Number	 000000ABh   
bq4c . . . . . . . . . . . . . .	Byte	 000045AC _DATA	
bq5c_size  . . . . . . . . . . .	Number	 000000A6h   
bq5c . . . . . . . . . . . . . .	Byte	 00004658 _DATA	
bq6c_size  . . . . . . . . . . .	Number	 00000050h   
bq6c . . . . . . . . . . . . . .	Byte	 000046FF _DATA	
bq7c_size  . . . . . . . . . . .	Number	 0000008Ch   
bq7c . . . . . . . . . . . . . .	Byte	 00004750 _DATA	
bq8c_size  . . . . . . . . . . .	Number	 00000082h   
bq8c . . . . . . . . . . . . . .	Byte	 000047DD _DATA	
bq9c_size  . . . . . . . . . . .	Number	 0000007Bh   
bq9c . . . . . . . . . . . . . .	Byte	 00004860 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
bufSize  . . . . . . . . . . . .	DWord	 0000002A _DATA	
buffer2  . . . . . . . . . . . .	Byte	 0000036B _DATA	
bufferSize1  . . . . . . . . . .	Number	 00001388h   
bufferSize2  . . . . . . . . . .	Number	 00001388h   
bufferSize . . . . . . . . . . .	Number	 00001388h   
buffers1 . . . . . . . . . . . .	Byte	 00002D0F _DATA	
buffers2 . . . . . . . . . . . .	Byte	 00001948 _DATA	
buffers  . . . . . . . . . . . .	Byte	 00000582 _DATA	
buffer . . . . . . . . . . . . .	Byte	 00000000 _DATA	
bytesReads1  . . . . . . . . . .	DWord	 000040A6 _DATA	
bytesReads2  . . . . . . . . . .	DWord	 00002CDF _DATA	
bytesReads . . . . . . . . . . .	DWord	 00001918 _DATA	
bytesWritten . . . . . . . . . .	DWord	 00000050 _DATA	
count  . . . . . . . . . . . . .	DWord	 00000367 _DATA	
cq10c_size . . . . . . . . . . .	Number	 00000066h   
cq10c  . . . . . . . . . . . . .	Byte	 00004E44 _DATA	
cq1c_size  . . . . . . . . . . .	Number	 0000005Ah   
cq1c . . . . . . . . . . . . . .	Byte	 0000495F _DATA	
cq2c_size  . . . . . . . . . . .	Number	 000000B7h   
cq2c . . . . . . . . . . . . . .	Byte	 000049BA _DATA	
cq3c_size  . . . . . . . . . . .	Number	 00000097h   
cq3c . . . . . . . . . . . . . .	Byte	 00004A72 _DATA	
cq4c_size  . . . . . . . . . . .	Number	 000000DCh   
cq4c . . . . . . . . . . . . . .	Byte	 00004B0A _DATA	
cq5c_size  . . . . . . . . . . .	Number	 00000063h   
cq5c . . . . . . . . . . . . . .	Byte	 00004BE7 _DATA	
cq6c_size  . . . . . . . . . . .	Number	 000000D8h   
cq6c . . . . . . . . . . . . . .	Byte	 00004C4B _DATA	
cq7c_size  . . . . . . . . . . .	Number	 0000004Bh   
cq7c . . . . . . . . . . . . . .	Byte	 00004D24 _DATA	
cq8c_size  . . . . . . . . . . .	Number	 0000005Fh   
cq8c . . . . . . . . . . . . . .	Byte	 00004D70 _DATA	
cq9c_size  . . . . . . . . . . .	Number	 00000073h   
cq9c . . . . . . . . . . . . . .	Byte	 00004DD0 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errMsg . . . . . . . . . . . . .	Byte	 0000002E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
f_handle . . . . . . . . . . . .	DWord	 0000056C _DATA	
f_name . . . . . . . . . . . . .	Byte	 00000560 _DATA	
fileHandle . . . . . . . . . . .	DWord	 0000004C _DATA	
filehandles1 . . . . . . . . . .	DWord	 00004097 _DATA	
filehandles2 . . . . . . . . . .	DWord	 00002CD0 _DATA	
filehandles  . . . . . . . . . .	DWord	 0000190A _DATA	
filenames1 . . . . . . . . . . .	Byte	 0000409B _DATA	
filenames2 . . . . . . . . . . .	Byte	 00002CD4 _DATA	
filenames  . . . . . . . . . . .	Byte	 0000190E _DATA	
filename . . . . . . . . . . . .	Byte	 00000041 _DATA	
finalmsg . . . . . . . . . . . .	Byte	 00000306 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
life . . . . . . . . . . . . . .	Byte	 00000364 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
msg1 . . . . . . . . . . . . . .	Byte	 00000152 _DATA	
msg3 . . . . . . . . . . . . . .	Byte	 00000167 _DATA	
msg4 . . . . . . . . . . . . . .	Byte	 0000017C _DATA	
name1  . . . . . . . . . . . . .	Byte	 00000145 _DATA	
player . . . . . . . . . . . . .	Byte	 000000CC _DATA	
quesL1 . . . . . . . . . . . . .	DWord	 00000054 _DATA	
quesL2 . . . . . . . . . . . . .	DWord	 0000007C _DATA	
quesL3 . . . . . . . . . . . . .	DWord	 000000A4 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
scoreL1  . . . . . . . . . . . .	Byte	 0000014F _DATA	
scoreL2  . . . . . . . . . . . .	Byte	 00000150 _DATA	
scoreL3  . . . . . . . . . . . .	Byte	 00000151 _DATA	
spaces1  . . . . . . . . . . . .	Byte	 000000E0 _DATA	
space  . . . . . . . . . . . . .	Byte	 00000580 _DATA	
str1 . . . . . . . . . . . . . .	Byte	 00000574 _DATA	
string1  . . . . . . . . . . . .	Byte	 00000191 _DATA	
string2  . . . . . . . . . . . .	Byte	 000001A4 _DATA	
string3  . . . . . . . . . . . .	Byte	 000001B3 _DATA	
string4  . . . . . . . . . . . .	Byte	 000001C1 _DATA	
string5  . . . . . . . . . . . .	Byte	 000001DD _DATA	
string6  . . . . . . . . . . . .	Byte	 000001F8 _DATA	
string7  . . . . . . . . . . . .	Byte	 000002D6 _DATA	
stringlength . . . . . . . . . .	DWord	 00000570 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
